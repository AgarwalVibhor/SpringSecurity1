<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.2.xsd">
	
	<http use-expressions="true">
		<intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/admin.*/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/hello/**" access="hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')" />
		<intercept-url pattern="/hello.*/**" access="hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')" />
		
		<form-login login-page="/login" default-target-url="/admin" authentication-failure-url="/login?error" 
		 username-parameter="username" password-parameter="password" />
		 
		 <access-denied-handler error-page="/403" />
		 
		 <logout logout-success-url="/login?logout" />
		 
		 <csrf /> <!-- For this, it is necessary to use spring-security-3.2.xsd -->
	</http>
	
	
	<!-- Use <jdbc-user-service) to define a query to perform database authentication -->
	<authentication-manager>
		<authentication-provider>
			<jdbc-user-service data-source-ref="dataSource"
			users-by-username-query="select * from users where username = ?"
			authorities-by-username-query="select username, role from user_roles where username = ?" />
			<!-- For a particular (username, role), we have a unique uer_role_id in the user_roles table. -->
		</authentication-provider>
	</authentication-manager>

	
</beans:beans>